{#
This Jinja2 template is used to generate the 2 variants of the service Dockerfile -

1. Dockerfile.assisted-service - This is the Dockerfile that is used by our CI.
It builds the golang service binary as part of the container build process.
This is required because of the way prow builds images.
This Dockerfile is not able to use go build caching mechanisms.
This dockerfile has to be committed to git in order to be consumed by prow.

2. Dockerfile.assisted-service.dev - This is the Dockerfile that is used for local development.
It copies the service binary from a local directory.
The service binary is expected to be built locally before building this Dockerfile.
The local build is done quickly using standard go build caching mechanisms (preferabbly using Skipper,
to maintain a consistent build environment across dev machines).
Because this Dockerfile avoids the go build inside the Dockerfile, the image build finishes much more
quickly and is thus a better fit for development purposes 
#}

{# Place a "this file is generated" warning at the top of the generated files #}
{{generated_warning}}

# Generate python client
FROM quay.io/ocpmetal/swagger-codegen-cli:2.4.15 as swagger_py

COPY swagger.yaml .
COPY tools/generate_python_client.sh .
RUN chmod +x ./generate_python_client.sh && SWAGGER_FILE=swagger.yaml OUTPUT=/build ./generate_python_client.sh

FROM registry.ci.openshift.org/openshift/release:golang-1.15 as pybuilder
COPY --from=swagger_py /build build
RUN cd build && python3 setup.py sdist --dist-dir /assisted-service-client

FROM registry.ci.openshift.org/openshift/release:golang-1.15 as builder
{% if build_go_inside_container %}
# Build binaries
# Bring in the go dependencies before anything else so we can take
# advantage of caching these layers in future builds.
COPY . .
RUN CGO_ENABLED=0 GOFLAGS="" GO111MODULE=on go build -o /build/assisted-service cmd/main.go
{% else %}
# Copy locally built binaries
COPY build/assisted-installer/assisted-service /build/assisted-service
{% endif %}

# Create final image
FROM quay.io/centos/centos:centos8

# openshift-install requires this
RUN dnf install -y libvirt-libs python3 && \
    dnf install -b -y  dnf-plugins-core && \
    dnf copr enable -y networkmanager/NetworkManager-master && \
    dnf copr enable -y nmstate/ovs-el8 && \
    dnf copr enable -y nmstate/nmstate-0.3&& \
    dnf copr enable -y nmstate/nispor && \
    dnf install -y pkg-config && \
    dnf install -y glib2-devel && \
    dnf install -y gobject-introspection-devel && \
    dnf install -y cairo-devel && \
    dnf install -y cairo-gobject-devel && \
    dnf install -y python3-devel && \
    dnf install -y python3-nispor && \
    dnf install -y NetworkManager && \
    dnf install -y NetworkManager-ovs && \
    dnf install -y NetworkManager-team && \
    dnf install -y NetworkManager-config-server && \
    dnf install -y openvswitch2.11 && \
    dnf install -y python3-openvswitch2.11 && \
    pip3 install --user pycairo && \
    dnf remove -y dnf-plugins-core && \
    dnf clean all

RUN mkdir nmstate
RUN curl -SL https://github.com/nmstate/nmstate/releases/download/v1.0.2/nmstate-1.0.2.tar.gz | tar -xz -C nmstate
RUN cd /nmstate/nmstate-1.0.2 && python3 setup.py build
RUN cd /nmstate/nmstate-1.0.2 && python3 setup.py install

ARG WORK_DIR=/data

RUN mkdir $WORK_DIR && chmod 775 $WORK_DIR

# downstream this can be installed as an RPM
ARG OC_URL=https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
RUN curl -s $OC_URL | tar -xzC /usr/local/bin/ oc

COPY --from=builder /build/assisted-service /assisted-service
COPY --from=pybuilder /assisted-service-client/assisted-service-client-*.tar.gz /clients/
COPY /config/onprem-iso-config.ign /data/onprem-iso-config.ign
CMD ["/assisted-service"]
